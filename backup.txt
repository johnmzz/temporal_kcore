    // for (int u = 0; u < n_; ++u) {
    //     int v, t;
    //     int offset = 0;
    //     vector<int> cnt = vector<int>(t_);
    //     v_c_ = vector<vector<bool>>(t_, vector<bool>(n_));

    //     for (int i = 0; i < nbr_[u].size(); ++i) {
    //         v = nbr_[u][i].first;
    //         t = nbr_[u][i].second;
    //         for (int j = offset; j <= t; ++j) {
    //             if (v_c_[j][v]) continue;

    //             cnt[j]++;
    //             v_c_[j][v] = true;
    //             if (cnt[j] == k) {
    //                 ct_[u][j] = t;
    //                 offset++;
    //             }
    //         }
    //     }
    // }

    








    // for (int u = 0; u < n_; ++u) {
    //     vector<int> bm_history;
    //     for (int i = 1; i < nbr_time_[u].size(); ++i) {
    //         int cnt = 0;

    //         for (int j = offset_[u][i-1]; j < nbr_[u].size(); j++) {
    //             int v = nbr_[u][j].first;
    //             int t = nbr_[u][j].second;

    //             if (v_a_[v]) continue;

    //             cnt++;
    //             if (cnt == k) {
    //                 // for (int ts = nbr_time_[u][i-1]+1; ts <= nbr_time_[u][i]; ts++) {
    //                 //     ct_[u][ts] = t;
    //                 // }
    //                 int ts = nbr_time_[u][i-1]+1;
    //                 ct_[u].emplace_back(make_pair(ts, t));
    //                 break;
    //             }

    //             v_a_[v] = true;
    //             bm_history.emplace_back(v);
    //         }

    //         for (auto &v : bm_history) v_a_[v] = false;
    //         bm_history.clear();
    //     }
    // }